/**
 * ============================
 * CHAT DE IA INTEGRADO COM TRANSFORMERS.JS
 * ============================
 * 
 * Este script implementa um chat interativo com IA que funciona 100% no navegador.
 * Utiliza Transformers.js para processamento local sem necessidade de backend.
 * 
 * Funcionalidades:
 * - Chat interativo com modelo de linguagem local
 * - Perguntas pr√©-definidas para intera√ß√£o r√°pida
 * - Sele√ß√£o de texto para an√°lise contextual
 * - Interface responsiva e acess√≠vel
 */

// ============================
// CONFIGURA√á√ïES DA IA
// ============================

const AI_CONFIG = {
  MODEL_ID: 'Xenova/gpt2', // Modelo mais robusto para melhor qualidade
  MAX_LENGTH: 150,         // Comprimento m√°ximo da resposta
  TEMPERATURE: 0.3,        // Menos criatividade para respostas mais focadas
  TOP_P: 0.8,             // Nucleus sampling mais conservador
  DO_SAMPLE: true,        // Ativa amostragem
  BATCH_SIZE: 1           // Tamanho do lote
};

// ============================
// VARI√ÅVEIS GLOBAIS
// ============================

let pipeline = null;
let isModelLoaded = false;
let isGenerating = false;
let selectedText = '';
let chatHistory = [];

// ============================
// CARREGAMENTO DO MODELO
// ============================

/**
 * Carrega o modelo de IA usando Transformers.js
 */
async function loadAIModel() {
  try {
    console.log('Iniciando carregamento do modelo de IA...');
    
    // Importa dinamicamente o Transformers.js
    const { pipeline: createPipeline } = await import('https://cdn.jsdelivr.net/npm/@xenova/transformers@2.17.2');
    
    // Carrega o pipeline de gera√ß√£o de texto
    pipeline = await createPipeline('text-generation', AI_CONFIG.MODEL_ID, {
      revision: 'main',
      cache_dir: './models/' // Cache local para melhor performance
    });
    
    isModelLoaded = true;
    console.log('Modelo de IA carregado com sucesso!');
    
    // Esconde indicador de carregamento e mostra chat
    showChatInterface();
    
    // Adiciona mensagem de boas-vindas
    addWelcomeMessage();
    
  } catch (error) {
    console.error('Erro ao carregar modelo de IA:', error);
    showErrorMessage('Erro ao carregar a IA. Tente recarregar a p√°gina.');
  }
}

/**
 * Mostra a interface do chat ap√≥s carregar o modelo
 */
function showChatInterface() {
  const loadingIndicator = document.getElementById('ai-loading-indicator');
  const chatContent = document.getElementById('ai-chat-content');
  
  if (loadingIndicator) {
    loadingIndicator.classList.add('hidden');
  }
  
  if (chatContent) {
    chatContent.classList.remove('hidden');
  }
}

/**
 * Adiciona mensagem de boas-vindas
 */
function addWelcomeMessage() {
  const welcomeMessage = `üéì **Ol√°! Sou seu assistente de estudos m√©dicos.**

üîπ **Como posso ajudar voc√™ hoje:**
‚Ä¢ üß∏ **Explica√ß√µes simples** - Para entender conceitos complexos
‚Ä¢ üî¨ **An√°lises t√©cnicas** - Detalhes em n√≠vel de doutorado  
‚Ä¢ üìã **Casos cl√≠nicos** - Pr√°tica de diagn√≥stico diferencial
‚Ä¢ üìö **Resumos** - Pontos high-yield para provas

üéØ **Para come√ßar:**
1. **Selecione qualquer texto** na p√°gina - aparecer√£o bot√µes de a√ß√£o
2. **Use os bot√µes r√°pidos** abaixo para perguntas comuns
3. **Digite sua pr√≥pria pergunta** sobre o conte√∫do

*Especializado em S√≠ndrome Ict√©rica, bilirrubina e metabolismo hep√°tico!*`;
  
  addMessageToChat('ai', welcomeMessage);
}

/**
 * Mostra mensagem de erro
 */
function showErrorMessage(message) {
  const loadingIndicator = document.getElementById('ai-loading-indicator');
  if (loadingIndicator) {
    loadingIndicator.innerHTML = `
      <div style="color: #e74c3c; text-align: center;">
        <p>‚ùå ${message}</p>
        <button onclick="location.reload()" style="margin-top: 10px; padding: 8px 16px; background: #e74c3c; color: white; border: none; border-radius: 4px; cursor: pointer;">
          Recarregar
        </button>
      </div>
    `;
  }
}

// ============================
// GERA√á√ÉO DE RESPOSTAS
// ============================

/**
 * Gera resposta da IA baseada no prompt
 */
async function generateAIResponse(prompt, context = '') {
  if (isGenerating) {
    throw new Error('A IA j√° est√° processando uma resposta. Aguarde...');
  }
  
  isGenerating = true;
  
  try {
    console.log('Processando pergunta:', prompt);
    
    // Primeiro tenta uma resposta contextual inteligente
    let response = generateContextualResponse(prompt, context);
    
    // Se n√£o encontrou resposta contextual, usa o modelo de IA
    if (!response && isModelLoaded && pipeline) {
      response = await generateModelResponse(prompt, context);
    }
    
    // Se ainda n√£o tem resposta, usa fallback educativo
    if (!response) {
      response = generateFallbackResponse(prompt, context);
    }
    
    console.log('Resposta gerada:', response);
    return response;
    
  } catch (error) {
    console.error('Erro ao gerar resposta:', error);
    return generateFallbackResponse(prompt, context);
  } finally {
    isGenerating = false;
  }
}

/**
 * Gera resposta contextual baseada em padr√µes conhecidos
 */
function generateContextualResponse(prompt, context) {
  const promptLower = prompt.toLowerCase();
  const contextLower = context.toLowerCase();
  
  // Respostas para explica√ß√µes infantis
  if (promptLower.includes('crian√ßa') || promptLower.includes('8 anos')) {
    if (contextLower.includes('crigler-najjar')) {
      return `üß∏ **Explica√ß√£o para crian√ßas:**

Imagine que no seu corpo existe uma f√°brica especial (o f√≠gado) que limpa o sangue e tira as coisas ruins. 

A S√≠ndrome de Crigler-Najjar acontece quando um trabalhador muito importante dessa f√°brica (uma enzima) n√£o funciona direito. √â como se fosse um funcion√°rio que deveria pintar as coisas de amarelo para tir√°-las do corpo, mas ele est√° doente.

Quando isso acontece, o amarelo (bilirrubina) fica acumulado no corpo, deixando a pele e os olhos amarelados. √â uma condi√ß√£o muito rara que a crian√ßa nasce com ela - como ter olhos azuis ou cabelo loiro.

Os m√©dicos podem ajudar com tratamentos especiais para que a crian√ßa se sinta melhor! üíõ`;
    }
    
    if (contextLower.includes('gilbert')) {
      return `üß∏ **Explica√ß√£o para crian√ßas:**

A S√≠ndrome de Gilbert √© como ter um funcion√°rio "pregui√ßoso" na f√°brica do corpo (f√≠gado). 

Esse funcion√°rio deveria limpar uma tinta amarela (bilirrubina) do sangue, mas √†s vezes ele trabalha devagar. √â como quando voc√™ est√° cansado e faz as tarefas mais lentamente.

Isso deixa a pessoa um pouquinho amarelada √†s vezes, especialmente quando est√° cansada, com fome ou estressada. Mas n√£o √© perigoso - √© como ter sardas ou ser mais alto que os amigos!

Na verdade, essa "pregui√ßa" especial at√© protege o corpo de algumas doen√ßas. √â uma caracter√≠stica especial que muitas pessoas t√™m! üòä`;
    }
    
    if (contextLower.includes('icter√≠cia') || contextLower.includes('bilirrubina')) {
      return `üß∏ **Explica√ß√£o para crian√ßas:**

A icter√≠cia √© quando a pele e os olhos ficam amarelados, como se a pessoa tivesse comido muito cenoura! 

Isso acontece porque existe uma tinta amarela (bilirrubina) no nosso corpo que vem dos gl√≥bulos vermelhos velhinhos. √â como quando voc√™ quebra um l√°pis amarelo e o p√≥ fica na sua m√£o.

Normalmente, o f√≠gado (que √© como uma f√°brica de limpeza) remove essa tinta amarela. Mas √†s vezes a f√°brica fica sobrecarregada ou tem algum problema, e a tinta se acumula.

√â importante ir ao m√©dico para descobrir por que isso est√° acontecendo e como ajudar a f√°brica a funcionar melhor! üè≠üíõ`;
    }
  }
  
  // Respostas para n√≠vel doutorado
  if (promptLower.includes('doutorado') || promptLower.includes('t√©cnica') || promptLower.includes('detalhada')) {
    if (contextLower.includes('crigler-najjar')) {
      return `üî¨ **An√°lise T√©cnica - N√≠vel Doutorado:**

**Fisiopatologia Molecular:**
A S√≠ndrome de Crigler-Najjar resulta de muta√ß√µes no gene UGT1A1 (cromossoma 2q37), que codifica a UDP-glicuroniltransferase 1A1. Esta enzima catalisa a conjuga√ß√£o da bilirrubina n√£o conjugada com √°cido glicur√¥nico.

**Classifica√ß√£o Molecular:**
- **Tipo I:** Defici√™ncia completa da UGT1A1 (muta√ß√µes nonsense/frameshift)
- **Tipo II:** Defici√™ncia parcial (muta√ß√µes missense com atividade residual <10%)

**Correla√ß√£o Gen√≥tipo-Fen√≥tipo:**
- Tipo I: Bilirrubina >20 mg/dL, kernicterus inevit√°vel sem interven√ß√£o
- Tipo II: Bilirrubina 6-20 mg/dL, responsivo ao fenobarbital

**Implica√ß√µes Terap√™uticas:**
- Fenobarbital induz CYP2A6 e UGT1A1 residual
- Fototerapia converte bilirrubina em fotois√¥meros sol√∫veis
- Transplante hep√°tico restaura capacidade conjugativa

**Progn√≥stico:** Dependente da preven√ß√£o de encefalopatia bilirrub√≠nica durante desenvolvimento neurol√≥gico.`;
    }
  }
  
  // Respostas para casos cl√≠nicos
  if (promptLower.includes('caso cl√≠nico') || promptLower.includes('diagn√≥stico diferencial')) {
    if (contextLower.includes('crigler-najjar') || contextLower.includes('gilbert')) {
      return `üìã **Caso Cl√≠nico:**

**Apresenta√ß√£o:**
Paciente masculino, 25 anos, apresenta icter√≠cia intermitente desde a adolesc√™ncia, mais evidente durante jejum prolongado e epis√≥dios de estresse. Nega dor abdominal, col√∫ria ou acolia fecal.

**Exame F√≠sico:**
- Icter√≠cia leve de escleras
- Abdome sem hepatoesplenomegalia
- Demais sistemas normais

**Laborat√≥rio:**
- Bilirrubina total: 3.2 mg/dL (VR: <1.2)
- Bilirrubina indireta: 2.8 mg/dL
- Bilirrubina direta: 0.4 mg/dL
- TGO/TGP: normais
- Hemograma: normal

**Diagn√≥stico Diferencial:**
1. S√≠ndrome de Gilbert ‚≠ê
2. Hem√≥lise subcl√≠nica
3. S√≠ndrome de Crigler-Najjar tipo II
4. Hepatopatia subcl√≠nica

**Pontos High-Yield:**
- Jejum prolongado exacerba Gilbert
- Reticul√≥citos normais excluem hem√≥lise
- Fenobarbital melhora Gilbert e CN-II
- Gilbert: preval√™ncia 7-9% popula√ß√£o`;
    }
  }
  
  return null; // N√£o encontrou resposta contextual
}

/**
 * Gera resposta usando modelo de IA
 */
async function generateModelResponse(prompt, context) {
  try {
    const fullPrompt = preparePrompt(prompt, context);
    
    const result = await pipeline(fullPrompt, {
      max_length: AI_CONFIG.MAX_LENGTH,
      temperature: AI_CONFIG.TEMPERATURE,
      top_p: AI_CONFIG.TOP_P,
      do_sample: AI_CONFIG.DO_SAMPLE,
      num_return_sequences: 1,
      pad_token_id: pipeline.tokenizer.eos_token_id
    });
    
    let response = result[0].generated_text;
    response = response.replace(fullPrompt, '').trim();
    return postProcessResponse(response);
    
  } catch (error) {
    console.error('Erro no modelo de IA:', error);
    return null;
  }
}

/**
 * Gera resposta fallback educativa
 */
function generateFallbackResponse(prompt, context) {
  const promptLower = prompt.toLowerCase();
  
  if (promptLower.includes('crian√ßa') || promptLower.includes('simples')) {
    return `üß∏ Entendi que voc√™ quer uma explica√ß√£o simples! 

A icter√≠cia (ficar amarelado) acontece quando uma subst√¢ncia amarela chamada bilirrubina se acumula no corpo. √â como quando voc√™ mistura tinta amarela na √°gua - ela fica toda amarelada!

Isso pode acontecer por v√°rios motivos, mas o importante √© que os m√©dicos sabem como investigar e tratar. 

Gostaria que eu explique alguma parte espec√≠fica de forma mais detalhada? üòä`;
  }
  
  if (promptLower.includes('doutorado') || promptLower.includes('t√©cnic')) {
    return `üî¨ Para uma an√°lise t√©cnica detalhada:

A s√≠ndrome ict√©rica envolve o metabolismo da bilirrubina, desde sua forma√ß√£o pela degrada√ß√£o do heme at√© sua excre√ß√£o biliar. Os dist√∫rbios podem ser classificados em:

1. **Pr√©-hep√°ticos:** Hem√≥lise excessiva
2. **Hep√°ticos:** Disfun√ß√£o hepatocelular ou defeitos enzim√°ticos
3. **P√≥s-hep√°ticos:** Obstru√ß√£o biliar

O diagn√≥stico diferencial baseia-se na propor√ß√£o bilirrubina direta/indireta e no padr√£o das enzimas hep√°ticas.

Precisa de detalhes sobre algum aspecto espec√≠fico da fisiopatologia?`;
  }
  
  if (promptLower.includes('caso cl√≠nico')) {
    return `üìã Aqui est√° um caso cl√≠nico relevante:

**Cen√°rio:** Paciente com icter√≠cia intermitente, sem sintomas sist√™micos, com predom√≠nio de bilirrubina indireta.

**Pontos-chave para investiga√ß√£o:**
- Hist√≥ria familiar de icter√≠cia
- Fatores precipitantes (jejum, estresse)
- Aus√™ncia de hepatomegalia
- Enzimas hep√°ticas normais

**Principais hip√≥teses diagn√≥sticas:**
1. S√≠ndrome de Gilbert
2. Hem√≥lise subcl√≠nica
3. S√≠ndrome de Crigler-Najjar

Gostaria que eu elabore algum aspecto espec√≠fico do caso?`;
  }
  
  return `üí° Entendi sua pergunta sobre o conte√∫do m√©dico! 

Posso ajud√°-lo de v√°rias formas:
- **Explica√ß√µes simples** para conceitos complexos
- **An√°lises t√©cnicas** detalhadas  
- **Casos cl√≠nicos** para pr√°tica
- **Resumos** dos pontos principais

Como posso explicar melhor o t√≥pico que voc√™ selecionou? Voc√™ pode:
1. Usar os bot√µes de pergunta r√°pida
2. Fazer uma pergunta espec√≠fica
3. Selecionar outro texto da p√°gina

O que seria mais √∫til para seu estudo? üìö`;
}

/**
 * Prepara o prompt com contexto m√©dico
 */
function preparePrompt(userPrompt, context = '') {
  const medicalContext = `
Como um assistente m√©dico educacional especializado em explicar conceitos de medicina de forma clara e precisa:

Contexto m√©dico atual: ${context || 'S√≠ndrome Ict√©rica - estudo sobre bilirrubina e icter√≠cia'}

Pergunta do estudante: ${userPrompt}

Resposta educativa:`;

  return medicalContext;
}

/**
 * P√≥s-processa a resposta para melhorar qualidade
 */
function postProcessResponse(response) {
  if (!response || response.length < 10) {
    return 'Desculpe, n√£o consegui gerar uma resposta adequada. Pode reformular sua pergunta?';
  }
  
  // Remove quebras de linha excessivas
  response = response.replace(/\n\s*\n\s*\n/g, '\n\n');
  
  // Remove caracteres especiais problem√°ticos
  response = response.replace(/[^\w\s\.,;:!?\-\(\)\[\]"'√°√©√≠√≥√∫√†√®√¨√≤√π√¢√™√Æ√¥√ª√£√µ√ß√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á]/g, '');
  
  // Limita a resposta se muito longa
  if (response.length > 500) {
    response = response.substring(0, 500) + '...';
  }
  
  // Adiciona pontualiza√ß√£o se necess√°rio
  if (!response.match(/[.!?]$/)) {
    response += '.';
  }
  
  return response.trim();
}

// ============================
// INTERFACE DO CHAT
// ============================

/**
 * Adiciona mensagem ao chat
 */
function addMessageToChat(sender, message, isTyping = false) {
  const messagesContainer = document.getElementById('ai-chat-messages');
  if (!messagesContainer) return;
  
  const messageDiv = document.createElement('div');
  messageDiv.className = `chat-message ${sender}`;
  
  if (isTyping && sender === 'ai') {
    messageDiv.classList.add('typing');
    messageDiv.innerHTML = `
      <span>Pensando</span>
      <div class="typing-indicator">
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
      </div>
    `;
  } else {
    messageDiv.textContent = message;
  }
  
  messagesContainer.appendChild(messageDiv);
  messagesContainer.scrollTop = messagesContainer.scrollHeight;
  
  return messageDiv;
}

/**
 * Remove mensagem do chat
 */
function removeMessageFromChat(messageElement) {
  if (messageElement && messageElement.parentNode) {
    messageElement.parentNode.removeChild(messageElement);
  }
}

/**
 * Processa envio de mensagem
 */
async function sendMessage(message, context = '') {
  if (!message.trim()) return;
  
  // Adiciona mensagem do usu√°rio
  addMessageToChat('user', message);
  
  // Adiciona indicador de digita√ß√£o
  const typingMessage = addMessageToChat('ai', '', true);
  
  // Desabilita bot√µes durante processamento
  toggleChatControls(false);
  
  try {
    // Gera resposta
    const response = await generateAIResponse(message, context);
    
    // Remove indicador de digita√ß√£o
    removeMessageFromChat(typingMessage);
    
    // Adiciona resposta da IA
    addMessageToChat('ai', response);
    
    // Salva no hist√≥rico
    chatHistory.push({ user: message, ai: response, context: context });
    
  } catch (error) {
    // Remove indicador de digita√ß√£o
    removeMessageFromChat(typingMessage);
    
    // Mostra mensagem de erro
    const errorMessage = error.message || 'Erro ao processar sua mensagem. Tente novamente.';
    addMessageToChat('ai', `‚ùå ${errorMessage}`);
    
    console.error('Erro no chat:', error);
  } finally {
    // Reabilita controles
    toggleChatControls(true);
  }
}

/**
 * Habilita/desabilita controles do chat
 */
function toggleChatControls(enabled) {
  const sendButton = document.getElementById('ai-chat-send');
  const inputField = document.getElementById('ai-chat-input');
  const quickButtons = document.querySelectorAll('.ai-quick-btn');
  
  if (sendButton) {
    sendButton.disabled = !enabled;
  }
  
  if (inputField) {
    inputField.disabled = !enabled;
  }
  
  quickButtons.forEach(btn => {
    btn.disabled = !enabled;
  });
}

// ============================
// PERGUNTAS PR√â-DEFINIDAS
// ============================

/**
 * Define templates de perguntas baseadas no tipo
 */
function getQuestionTemplate(type, selectedText = '') {
  const templates = {
    'como-crianca': `Explique o seguinte conceito m√©dico de forma muito simples, como se fosse para uma crian√ßa de 8 anos: "${selectedText}"`,
    'nivel-doutorado': `Forne√ßa uma explica√ß√£o detalhada e t√©cnica em n√≠vel de doutorado sobre: "${selectedText}"`,
    'caso-clinico': `Crie um caso cl√≠nico interessante para diagn√≥stico diferencial envolvendo: "${selectedText}". Inclui: apresenta√ß√£o, exames e pontos chave.`,
    'resumir': `Resuma os pontos mais importantes e high-yield facts sobre: "${selectedText}"`
  };
  
  return templates[type] || `Explique mais sobre: "${selectedText}"`;
}

/**
 * Processa pergunta r√°pida
 */
async function handleQuickQuestion(questionType) {
  const context = selectedText || 'conte√∫do da p√°gina sobre s√≠ndrome ict√©rica';
  const question = getQuestionTemplate(questionType, context);
  
  await sendMessage(question, context);
}

// ============================
// SELE√á√ÉO DE TEXTO
// ============================

/**
 * Obt√©m texto selecionado
 */
function getSelectedText() {
  const selection = window.getSelection();
  return selection.toString().trim();
}

/**
 * Mostra popup de a√ß√µes para texto selecionado
 */
function showTextSelectionPopup(x, y, text) {
  const popup = document.getElementById('text-selection-popup');
  if (!popup || !text) return;
  
  selectedText = text;
  
  // Posiciona popup
  popup.style.left = x + 'px';
  popup.style.top = (y - 10) + 'px';
  popup.classList.remove('hidden');
  
  // Remove popup ap√≥s 5 segundos
  setTimeout(() => {
    hideTextSelectionPopup();
  }, 5000);
}

/**
 * Esconde popup de sele√ß√£o
 */
function hideTextSelectionPopup() {
  const popup = document.getElementById('text-selection-popup');
  if (popup) {
    popup.classList.add('hidden');
  }
}

/**
 * Processa a√ß√£o de sele√ß√£o de texto
 */
async function handleTextSelection(action) {
  hideTextSelectionPopup();
  
  if (!selectedText) return;
  
  // Abre chat se n√£o estiver vis√≠vel
  const chatWindow = document.getElementById('ai-chat-window');
  if (chatWindow && chatWindow.classList.contains('hidden')) {
    toggleChat();
  }
  
  // Mapeia a√ß√µes para tipos de pergunta
  const actionMap = {
    'explain-child': 'como-crianca',
    'explain-phd': 'nivel-doutorado',
    'create-case': 'caso-clinico'
  };
  
  const questionType = actionMap[action];
  if (questionType) {
    await handleQuickQuestion(questionType);
  }
}

// ============================
// CONTROLE DA JANELA DE CHAT
// ============================

/**
 * Alterna visibilidade do chat
 */
function toggleChat() {
  const chatWindow = document.getElementById('ai-chat-window');
  if (!chatWindow) return;
  
  const isHidden = chatWindow.classList.contains('hidden');
  
  if (isHidden) {
    chatWindow.classList.remove('hidden');
    
    // Carrega modelo se necess√°rio
    if (!isModelLoaded && !pipeline) {
      loadAIModel();
    }
  } else {
    chatWindow.classList.add('hidden');
  }
}

/**
 * Fecha o chat
 */
function closeChat() {
  const chatWindow = document.getElementById('ai-chat-window');
  if (chatWindow) {
    chatWindow.classList.add('hidden');
  }
}

// ============================
// EVENT LISTENERS
// ============================

/**
 * Configura todos os event listeners do chat
 */
function setupChatEventListeners() {
  // Bot√£o de abrir chat
  const chatIcon = document.getElementById('ai-chat-icon');
  if (chatIcon) {
    chatIcon.addEventListener('click', toggleChat);
  }
  
  // Bot√£o de fechar chat
  const closeButton = document.getElementById('ai-chat-close');
  if (closeButton) {
    closeButton.addEventListener('click', closeChat);
  }
  
  // Bot√£o de enviar mensagem
  const sendButton = document.getElementById('ai-chat-send');
  if (sendButton) {
    sendButton.addEventListener('click', () => {
      const input = document.getElementById('ai-chat-input');
      if (input && input.value.trim()) {
        sendMessage(input.value.trim());
        input.value = '';
      }
    });
  }
  
  // Campo de input (Enter para enviar)
  const inputField = document.getElementById('ai-chat-input');
  if (inputField) {
    inputField.addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        const sendButton = document.getElementById('ai-chat-send');
        if (sendButton && !sendButton.disabled) {
          sendButton.click();
        }
      }
    });
    
    // Auto-resize do textarea
    inputField.addEventListener('input', (e) => {
      e.target.style.height = 'auto';
      e.target.style.height = Math.min(e.target.scrollHeight, 100) + 'px';
    });
  }
  
  // Bot√µes de perguntas r√°pidas
  const quickButtons = document.querySelectorAll('.ai-quick-btn');
  quickButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      const questionType = btn.getAttribute('data-question');
      if (questionType) {
        handleQuickQuestion(questionType);
      }
    });
  });
  
  // Bot√µes de a√ß√£o para texto selecionado
  const selectionButtons = document.querySelectorAll('.selection-btn');
  selectionButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      const action = btn.getAttribute('data-action');
      if (action) {
        handleTextSelection(action);
      }
    });
  });
  
  // Sele√ß√£o de texto
  document.addEventListener('mouseup', (e) => {
    setTimeout(() => {
      const text = getSelectedText();
      if (text && text.length > 10) {
        showTextSelectionPopup(e.pageX, e.pageY, text);
      } else {
        hideTextSelectionPopup();
      }
    }, 100);
  });
  
  // Clique fora do popup fecha ele
  document.addEventListener('click', (e) => {
    const popup = document.getElementById('text-selection-popup');
    if (popup && !popup.contains(e.target) && !popup.classList.contains('hidden')) {
      hideTextSelectionPopup();
    }
  });
  
  // ESC fecha chat e popup
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      const chatWindow = document.getElementById('ai-chat-window');
      const popup = document.getElementById('text-selection-popup');
      
      if (popup && !popup.classList.contains('hidden')) {
        hideTextSelectionPopup();
      } else if (chatWindow && !chatWindow.classList.contains('hidden')) {
        closeChat();
      }
    }
  });
  
  console.log('Event listeners do chat configurados');
}

// ============================
// INICIALIZA√á√ÉO
// ============================

/**
 * Inicializa o sistema de chat
 */
function initializeAIChat() {
  console.log('Inicializando chat de IA...');
  
  try {
    setupChatEventListeners();
    console.log('Chat de IA inicializado com sucesso!');
  } catch (error) {
    console.error('Erro ao inicializar chat de IA:', error);
  }
}

// ============================
// AUTO-INICIALIZA√á√ÉO
// ============================

// Inicializa quando o DOM estiver carregado
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeAIChat);
} else {
  initializeAIChat();
}

// Exporta fun√ß√µes para uso global se necess√°rio
window.AIChat = {
  loadModel: loadAIModel,
  sendMessage: sendMessage,
  toggleChat: toggleChat,
  closeChat: closeChat
};
