/**
 * ============================
 * SCRIPT PRINCIPAL DO MODELO DE RESUMOS M√âDICOS
 * ============================
 * 
 * Este script cont√©m toda a l√≥gica necess√°ria para:
 * - Cria√ß√£o din√¢mica de elementos de interface
 * - Gera√ß√£o autom√°tica do sum√°rio
 * - Controle da sidebar retr√°til
 * - Barra de progresso de leitura
 * - Cache bust de imagens
 * - Responsividade e acessibilidade
 * - Assistente IA com sele√ß√£o de texto e integra√ß√£o ChatGPT/OpenEvidence/Consensus/Perplexity
 * - Login GitHub OAuth via Supabase
 * - Sistema de anota√ß√µes
 * - Checklist de estudos
 * - Exporta√ß√£o PDF
 * - Modo claro/escuro
 * - Ajuste de fonte
 */

// ============================
// CONFIGURA√á√ïES GLOBAIS
// ============================

const CONFIG = {
  WPM: 150, // Palavras por minuto para c√°lculo de tempo de leitura
  MOBILE_BREAKPOINT: 768, // Breakpoint para dispositivos m√≥veis
  SCROLL_THROTTLE: 16, // Throttle para eventos de scroll (60fps)
  SIDEBAR_ANIMATION_DURATION: 300, // Dura√ß√£o da anima√ß√£o da sidebar em ms
  
  // Configura√ß√µes do Supabase - SUBSTITUA PELAS SUAS CHAVES
  SUPABASE_URL: 'http://0.0.0.0:8000/auth/v1/callback', // Exemplo: 'https://xyzcompany.supabase.co'
  SUPABASE_ANON_KEY: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF3aXJ3dWx6bm12d3phbGpwbmFpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc1NDAyNTMsImV4cCI6MjA3MzExNjI1M30.GSTjSVlUChh-E0mKVnd4gosXTusAXo-F0mOcLXgoDJw', // Chave p√∫blica do Supabase
  
  // URLs para contato e sugest√µes
  CONTACT_EMAIL: 'contato@domusmed.site',
  GITHUB_DISCUSSION_URL: 'https://github.com/domusmed/resumos/discussions/new?category=suggestions'
};

// ============================
// URLS DAS PLATAFORMAS DE IA
// ============================

const AI_PLATFORMS = {
  chatgpt: 'https://chat.openai.com/',
  openevidence: 'https://openevidence.com',
  consensus: 'https://consensus.app',
  perplexity: 'https://www.perplexity.ai'
};

// ============================
// PERGUNTAS PR√â-FORMULADAS
// ============================

const PREDEFINED_QUESTIONS = [
  {
    short: "Explique este conte√∫do de forma simples para uma crian√ßa de 10 anos",
    detailed: "Explique este conte√∫do m√©dico como se estivesse ensinando a uma crian√ßa de 10 anos, usando analogias simples, mantendo os conceitos corretos, de forma extremamente clara e did√°tica. Foque na compreens√£o b√°sica sem jarg√£o t√©cnico."
  },
  {
    short: "Resuma o conte√∫do em um par√°grafo para revis√£o r√°pida (n√≠vel doutorado)",
    detailed: "Explique este conte√∫do m√©dico em um √∫nico par√°grafo como resumo de aula de doutorado. Inclua pontos essenciais de fisiopatologia, epidemiologia, manifesta√ß√µes cl√≠nicas, diagn√≥stico diferencial, exames relevantes, tratamento ou progn√≥stico. Ressalte aspectos pr√°ticos e correla√ß√µes anat√¥micas ou cl√≠nicas importantes."
  },
  {
    short: "Explique o conte√∫do completo detalhado (n√≠vel doutorado)",
    detailed: "Explique este conte√∫do m√©dico detalhadamente, como em uma aula de doutorado. Inclua fisiopatologia, epidemiologia, manifesta√ß√µes cl√≠nicas, diagn√≥stico diferencial, exames laboratoriais e de imagem, tratamento, progn√≥stico e condutas pr√°ticas. Fa√ßa correla√ß√µes anat√¥micas, fisiol√≥gicas ou cl√≠nicas quando relevante, priorizando informa√ß√µes pr√°ticas e objetivas."
  },
  {
    short: "Crie um caso cl√≠nico real baseado neste conte√∫do",
    detailed: "Com base neste conte√∫do m√©dico, crie um caso cl√≠nico realista, incluindo hist√≥ria cl√≠nica, exame f√≠sico e resultados laboratoriais/exames de imagem relevantes. Destaque pontos importantes para tomada de decis√£o, diagn√≥stico e manejo, de forma educativa, sem fornecer respostas prontas."
  },
  {
    short: "Fa√ßa um resumo objetivo do conte√∫do para estudo pr√°tico",
    detailed: "Fa√ßa um resumo conciso do conte√∫do m√©dico, destacando sinais e sintomas chave, condutas iniciais, exames relevantes ou conceitos importantes para tomada de decis√£o cl√≠nica r√°pida, conforme o contexto apresentado."
  },
  {
    short: "Mostre a aplica√ß√£o pr√°tica cl√≠nica do conte√∫do",
    detailed: "Explique como os conceitos deste conte√∫do m√©dico se aplicam √† pr√°tica cl√≠nica, incluindo sinais, sintomas, exames laboratoriais e condutas iniciais. Foque em informa√ß√µes pr√°ticas e objetivas, sem se aprofundar em aspectos te√≥ricos irrelevantes."
  },
  {
    short: "Gere uma pergunta de revis√£o sobre este conte√∫do",
    detailed: "Gere uma pergunta de revis√£o sobre este conte√∫do m√©dico, incluindo m√∫ltipla escolha ou dissertativa curta, abordando fisiopatologia, diagn√≥stico, manejo cl√≠nico ou condutas urgentes. Foque em pontos pr√°ticos aplic√°veis na resid√™ncia m√©dica."
  },
  {
    short: "Quais protocolos cl√≠nicos se aplicam a este conte√∫do?",
    detailed: "Liste e explique os protocolos cl√≠nicos, guidelines ou condutas baseadas em evid√™ncia para este conte√∫do m√©dico. Enfatize condutas pr√°ticas, urgentes ou de rotina, e pontos cr√≠ticos para tomada de decis√£o na cl√≠nica do paciente."
  },
  {
    short: "Quais s√£o as evid√™ncias de tratamento mais recentes?",
    detailed: "Liste e explique as evid√™ncias cient√≠ficas mais recentes relacionadas ao tratamento desta condi√ß√£o. Inclua compara√ß√µes de condutas terap√™uticas, efic√°cia, riscos, efeitos adversos e recomenda√ß√µes pr√°ticas baseadas em guidelines reconhecidas."
  },
  {
    short: "Como diagnosticar esta condi√ß√£o com base em evid√™ncias?",
    detailed: "Quais s√£o os principais achados cl√≠nicos, laboratoriais e de imagem indicados pelas evid√™ncias para o diagn√≥stico desta condi√ß√£o? Destaque exames de maior sensibilidade e especificidade, crit√©rios diagn√≥sticos aceitos e recomenda√ß√µes pr√°ticas."
  },
  {
    short: "Explique a fisiopatologia desta condi√ß√£o",
    detailed: "Explique a fisiopatologia desta condi√ß√£o com base nas evid√™ncias dispon√≠veis, incluindo mecanismos moleculares, altera√ß√µes anat√¥micas e correla√ß√µes cl√≠nicas relevantes, de forma objetiva e pr√°tica para aplica√ß√£o em estudos cl√≠nicos ou resid√™ncia m√©dica."
  },
  {
    short: "Crie um caso cl√≠nico educativo baseado em evid√™ncias",
    detailed: "Com base nas evid√™ncias dispon√≠veis, crie um caso cl√≠nico educativo, incluindo hist√≥ria cl√≠nica, exame f√≠sico, achados laboratoriais e exames de imagem. Destaque pontos de decis√£o cl√≠nica, diagn√≥stico diferencial e manejo, visando aprendizado pr√°tico para resid√™ncia m√©dica."
  }
];

// ============================
// VARI√ÅVEIS GLOBAIS
// ============================

let selectedText = '';
let currentPlatform = 'chatgpt';
let supabaseClient = null;
let currentUser = null;
let currentNotes = [];
let checklistItems = [];
let currentFontSize = 20;
let isDarkTheme = false;

// ============================
// INICIALIZA√á√ÉO DO SUPABASE
// ============================

/**
 * Inicializa o cliente Supabase
 * IMPORTANTE: Substitua as configura√ß√µes em CONFIG pelas suas chaves reais
 */
function initializeSupabase() {
  try {
    // Verifica se as chaves foram configuradas
    if (CONFIG.SUPABASE_URL === 'http://0.0.0.0:8000/auth/v1/callback' || CONFIG.SUPABASE_ANON_KEY === 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF3aXJ3dWx6bm12d3phbGpwbmFpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc1NDAyNTMsImV4cCI6MjA3MzExNjI1M30.GSTjSVlUChh-E0mKVnd4gosXTusAXo-F0mOcLXgoDJw') {
      console.warn('‚ö†Ô∏è Configura√ß√µes do Supabase n√£o foram definidas. Funcionalidades de login e sincroniza√ß√£o estar√£o desabilitadas.');
      console.warn('üìñ Consulte o arquivo Guia_Supabase.md para instru√ß√µes de configura√ß√£o.');
      return false;
    }

    // Inicializa o cliente Supabase
    supabaseClient = supabase.createClient(CONFIG.SUPABASE_URL, CONFIG.SUPABASE_ANON_KEY);
    
    // Verifica se h√° usu√°rio logado
    checkAuthState();
    
    // Escuta mudan√ßas no estado de autentica√ß√£o
    supabaseClient.auth.onAuthStateChange((event, session) => {
      if (event === 'SIGNED_IN') {
        currentUser = session.user;
        updateLoginUI();
        loadUserPreferences();
        loadUserNotes();
        loadUserChecklist();
        showNotification('Login realizado com sucesso!');
      } else if (event === 'SIGNED_OUT') {
        currentUser = null;
        updateLoginUI();
        clearUserData();
        showNotification('Logout realizado com sucesso!');
      }
    });
    
    console.log('‚úÖ Supabase inicializado com sucesso');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao inicializar Supabase:', error);
    return false;
  }
}

/**
 * Verifica o estado atual de autentica√ß√£o
 */
async function checkAuthState() {
  if (!supabaseClient) return;
  
  try {
    const { data: { session } } = await supabaseClient.auth.getSession();
    if (session) {
      currentUser = session.user;
      updateLoginUI();
      loadUserPreferences();
      loadUserNotes();
      loadUserChecklist();
    }
  } catch (error) {
    console.error('Erro ao verificar estado de autentica√ß√£o:', error);
  }
}

// ============================
// FUN√á√ïES DE AUTENTICA√á√ÉO
// ============================

/**
 * Realiza login com GitHub OAuth
 */
async function loginWithGitHub() {
  if (!supabaseClient) {
    showNotification('Supabase n√£o configurado. Consulte a documenta√ß√£o.');
    return;
  }
  
  try {
    const { error } = await supabaseClient.auth.signInWithOAuth({
      provider: 'github',
      options: {
        redirectTo: window.location.origin
      }
    });
    
    if (error) {
      console.error('Erro no login:', error);
      showNotification('Erro ao fazer login. Tente novamente.');
    }
  } catch (error) {
    console.error('Erro no login:', error);
    showNotification('Erro ao fazer login. Tente novamente.');
  }
}

/**
 * Realiza logout
 */
async function logout() {
  if (!supabaseClient) return;
  
  try {
    const { error } = await supabaseClient.auth.signOut();
    if (error) {
      console.error('Erro no logout:', error);
      showNotification('Erro ao fazer logout. Tente novamente.');
    }
  } catch (error) {
    console.error('Erro no logout:', error);
    showNotification('Erro ao fazer logout. Tente novamente.');
  }
}

/**
 * Atualiza a interface de login
 */
function updateLoginUI() {
  const loginBtn = document.getElementById('login-btn');
  const userInfo = document.getElementById('user-info');
  const userAvatar = document.getElementById('user-avatar');
  const userName = document.getElementById('user-name');
  
  if (currentUser) {
    // Usu√°rio logado
    loginBtn.style.display = 'none';
    userInfo.style.display = 'flex';
    
    if (userAvatar && currentUser.user_metadata?.avatar_url) {
      userAvatar.src = currentUser.user_metadata.avatar_url;
    }
    
    if (userName) {
      userName.textContent = currentUser.user_metadata?.full_name || 
                           currentUser.user_metadata?.user_name || 
                           currentUser.email?.split('@')[0] || 
                           'Usu√°rio';
    }
  } else {
    // Usu√°rio n√£o logado
    loginBtn.style.display = 'flex';
    userInfo.style.display = 'none';
  }
}

/**
 * Limpa dados do usu√°rio ao fazer logout
 */
function clearUserData() {
  currentNotes = [];
  checklistItems = [];
  updateNotesUI();
  updateChecklistUI();
}

// ============================
// SISTEMA DE ANOTA√á√ïES
// ============================

/**
 * Carrega anota√ß√µes do usu√°rio do Supabase
 */
async function loadUserNotes() {
  if (!supabaseClient || !currentUser) return;
  
  try {
    const summaryId = getSummaryId();
    const { data, error } = await supabaseClient
      .from('notes')
      .select('*')
      .eq('user_id', currentUser.id)
      .eq('summary_id', summaryId)
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('Erro ao carregar anota√ß√µes:', error);
      return;
    }
    
    currentNotes = data || [];
    updateNotesUI();
    console.log(`Carregadas ${currentNotes.length} anota√ß√µes`);
  } catch (error) {
    console.error('Erro ao carregar anota√ß√µes:', error);
  }
}

/**
 * Salva uma nova anota√ß√£o no Supabase
 */
async function saveNote(text, selectedText = '') {
  if (!supabaseClient || !currentUser) {
    showNotification('Fa√ßa login para salvar anota√ß√µes');
    return false;
  }
  
  try {
    const summaryId = getSummaryId();
    const { data, error } = await supabaseClient
      .from('notes')
      .insert([
        {
          user_id: currentUser.id,
          summary_id: summaryId,
          text_selected: selectedText,
          note: text,
          created_at: new Date().toISOString()
        }
      ])
      .select();
    
    if (error) {
      console.error('Erro ao salvar anota√ß√£o:', error);
      showNotification('Erro ao salvar anota√ß√£o');
      return false;
    }
    
    // Adiciona √† lista local
    currentNotes.unshift(data[0]);
    updateNotesUI();
    showNotification('Anota√ß√£o salva com sucesso!');
    return true;
  } catch (error) {
    console.error('Erro ao salvar anota√ß√£o:', error);
    showNotification('Erro ao salvar anota√ß√£o');
    return false;
  }
}

/**
 * Atualiza uma anota√ß√£o existente
 */
async function updateNote(noteId, newText) {
  if (!supabaseClient || !currentUser) return false;
  
  try {
    const { error } = await supabaseClient
      .from('notes')
      .update({ note: newText })
      .eq('id', noteId)
      .eq('user_id', currentUser.id);
    
    if (error) {
      console.error('Erro ao atualizar anota√ß√£o:', error);
      showNotification('Erro ao atualizar anota√ß√£o');
      return false;
    }
    
    // Atualiza na lista local
    const noteIndex = currentNotes.findIndex(note => note.id === noteId);
    if (noteIndex !== -1) {
      currentNotes[noteIndex].note = newText;
      updateNotesUI();
    }
    
    showNotification('Anota√ß√£o atualizada!');
    return true;
  } catch (error) {
    console.error('Erro ao atualizar anota√ß√£o:', error);
    showNotification('Erro ao atualizar anota√ß√£o');
    return false;
  }
}

/**
 * Exclui uma anota√ß√£o
 */
async function deleteNote(noteId) {
  if (!supabaseClient || !currentUser) return false;
  
  if (!confirm('Tem certeza que deseja excluir esta anota√ß√£o?')) {
    return false;
  }
  
  try {
    const { error } = await supabaseClient
      .from('notes')
      .delete()
      .eq('id', noteId)
      .eq('user_id', currentUser.id);
    
    if (error) {
      console.error('Erro ao excluir anota√ß√£o:', error);
      showNotification('Erro ao excluir anota√ß√£o');
      return false;
    }
    
    // Remove da lista local
    currentNotes = currentNotes.filter(note => note.id !== noteId);
    updateNotesUI();
    showNotification('Anota√ß√£o exclu√≠da!');
    return true;
  } catch (error) {
    console.error('Erro ao excluir anota√ß√£o:', error);
    showNotification('Erro ao excluir anota√ß√£o');
    return false;
  }
}

/**
 * Atualiza a interface das anota√ß√µes
 */
function updateNotesUI() {
  const notesList = document.getElementById('notes-list');
  if (!notesList) return;
  
  notesList.innerHTML = '';
  
  if (currentNotes.length === 0) {
    notesList.innerHTML = '<p style="text-align: center; color: #666; font-style: italic;">Nenhuma anota√ß√£o encontrada</p>';
    return;
  }
  
  currentNotes.forEach(note => {
    const noteElement = createNoteElement(note);
    notesList.appendChild(noteElement);
  });
}

/**
 * Cria elemento HTML para uma anota√ß√£o
 */
function createNoteElement(note) {
  const noteDiv = document.createElement('div');
  noteDiv.className = 'note-item';
  noteDiv.setAttribute('data-note-id', note.id);
  
  const noteText = document.createElement('div');
  noteText.className = 'note-text';
  noteText.textContent = note.note;
  
  const noteMeta = document.createElement('div');
  noteMeta.className = 'note-meta';
  
  const noteDate = document.createElement('span');
  noteDate.textContent = new Date(note.created_at).toLocaleDateString('pt-BR');
  
  const noteActions = document.createElement('div');
  noteActions.className = 'note-actions';
  
  const editBtn = document.createElement('button');
  editBtn.className = 'note-edit-btn';
  editBtn.textContent = '‚úèÔ∏è';
  editBtn.title = 'Editar anota√ß√£o';
  editBtn.onclick = () => editNote(note.id, note.note);
  
  const deleteBtn = document.createElement('button');
  deleteBtn.className = 'note-delete-btn';
  deleteBtn.textContent = 'üóëÔ∏è';
  deleteBtn.title = 'Excluir anota√ß√£o';
  deleteBtn.onclick = () => deleteNote(note.id);
  
  noteActions.appendChild(editBtn);
  noteActions.appendChild(deleteBtn);
  
  noteMeta.appendChild(noteDate);
  noteMeta.appendChild(noteActions);
  
  noteDiv.appendChild(noteText);
  noteDiv.appendChild(noteMeta);
  
  return noteDiv;
}

/**
 * Edita uma anota√ß√£o
 */
function editNote(noteId, currentText) {
  const newText = prompt('Editar anota√ß√£o:', currentText);
  if (newText && newText.trim() !== currentText) {
    updateNote(noteId, newText.trim());
  }
}

/**
 * Adiciona uma nova anota√ß√£o
 */
function addNewNote() {
  const noteText = prompt('Digite sua anota√ß√£o:');
  if (noteText && noteText.trim()) {
    saveNote(noteText.trim(), selectedText);
  }
}

/**
 * Filtra anota√ß√µes por texto de busca
 */
function filterNotes(searchText) {
  const noteItems = document.querySelectorAll('.note-item');
  const searchLower = searchText.toLowerCase();
  
  noteItems.forEach(item => {
    const noteText = item.querySelector('.note-text').textContent.toLowerCase();
    if (noteText.includes(searchLower)) {
      item.style.display = 'block';
    } else {
      item.style.display = 'none';
    }
  });
}

// ============================
// SISTEMA DE CHECKLIST
// ============================

/**
 * Carrega checklist do usu√°rio
 */
async function loadUserChecklist() {
  if (!supabaseClient || !currentUser) {
    // Se n√£o estiver logado, carrega do localStorage
    loadChecklistFromLocalStorage();
    return;
  }
  
  try {
    const summaryId = getSummaryId();
    const { data, error } = await supabaseClient
      .from('checklist')
      .select('*')
      .eq('user_id', currentUser.id)
      .eq('summary_id', summaryId);
    
    if (error) {
      console.error('Erro ao carregar checklist:', error);
      loadChecklistFromLocalStorage();
      return;
    }
    
    if (data && data.length > 0) {
      checklistItems = data[0].items || [];
    } else {
      // Se n√£o h√° checklist salvo, cria um novo baseado nos t√≠tulos
      generateChecklistFromTitles();
    }
    
    updateChecklistUI();
    console.log(`Checklist carregado com ${checklistItems.length} itens`);
  } catch (error) {
    console.error('Erro ao carregar checklist:', error);
    loadChecklistFromLocalStorage();
  }
}

/**
 * Salva checklist no Supabase
 */
async function saveUserChecklist() {
  if (!supabaseClient || !currentUser) {
    // Se n√£o estiver logado, salva no localStorage
    saveChecklistToLocalStorage();
    return;
  }
  
  try {
    const summaryId = getSummaryId();
    const { error } = await supabaseClient
      .from('checklist')
      .upsert([
        {
          user_id: currentUser.id,
          summary_id: summaryId,
          items: checklistItems,
          updated_at: new Date().toISOString()
        }
      ]);
    
    if (error) {
      console.error('Erro ao salvar checklist:', error);
      saveChecklistToLocalStorage();
      return;
    }
    
    console.log('Checklist salvo no Supabase');
  } catch (error) {
    console.error('Erro ao salvar checklist:', error);
    saveChecklistToLocalStorage();
  }
}

/**
 * Carrega checklist do localStorage
 */
function loadChecklistFromLocalStorage() {
  const summaryId = getSummaryId();
  const saved = localStorage.getItem(`checklist_${summaryId}`);
  if (saved) {
    checklistItems = JSON.parse(saved);
  } else {
    generateChecklistFromTitles();
  }
  updateChecklistUI();
}

/**
 * Salva checklist no localStorage
 */
function saveChecklistToLocalStorage() {
  const summaryId = getSummaryId();
  localStorage.setItem(`checklist_${summaryId}`, JSON.stringify(checklistItems));
}

/**
 * Gera checklist baseado nos t√≠tulos da p√°gina
 */
function generateChecklistFromTitles() {
  const headers = document.querySelectorAll('h1, h2, h3, h4, h5');
  checklistItems = [];
  
  headers.forEach((header, index) => {
    checklistItems.push({
      id: `item_${index}`,
      title: header.textContent.trim(),
      completed: false
    });
  });
  
  console.log(`Checklist gerado com ${checklistItems.length} itens`);
}

/**
 * Atualiza a interface do checklist
 */
function updateChecklistUI() {
  const checklistContainer = document.getElementById('checklist-items');
  const progressBar = document.getElementById('checklist-progress-bar');
  const progressText = document.getElementById('checklist-progress-text');
  
  if (!checklistContainer) return;
  
  checklistContainer.innerHTML = '';
  
  checklistItems.forEach(item => {
    const itemElement = createChecklistItemElement(item);
    checklistContainer.appendChild(itemElement);
  });
  
  // Atualiza progresso
  const completedCount = checklistItems.filter(item => item.completed).length;
  const totalCount = checklistItems.length;
  const percentage = totalCount > 0 ? Math.round((completedCount / totalCount) * 100) : 0;
  
  if (progressBar) {
    progressBar.style.width = `${percentage}%`;
  }
  
  if (progressText) {
    progressText.textContent = `${percentage}% conclu√≠do (${completedCount}/${totalCount})`;
  }
}

/**
 * Cria elemento HTML para item do checklist
 */
function createChecklistItemElement(item) {
  const itemDiv = document.createElement('div');
  itemDiv.className = `checklist-item ${item.completed ? 'completed' : ''}`;
  
  const checkbox = document.createElement('input');
  checkbox.type = 'checkbox';
  checkbox.className = 'checklist-checkbox';
  checkbox.checked = item.completed;
  checkbox.onchange = () => toggleChecklistItem(item.id);
  
  const label = document.createElement('label');
  label.className = 'checklist-label';
  label.textContent = item.title;
  label.onclick = () => toggleChecklistItem(item.id);
  
  itemDiv.appendChild(checkbox);
  itemDiv.appendChild(label);
  
  return itemDiv;
}

/**
 * Alterna estado de um item do checklist
 */
function toggleChecklistItem(itemId) {
  const item = checklistItems.find(item => item.id === itemId);
  if (item) {
    item.completed = !item.completed;
    updateChecklistUI();
    saveUserChecklist();
  }
}

// ============================
// SISTEMA DE PREFER√äNCIAS
// ============================

/**
 * Carrega prefer√™ncias do usu√°rio
 */
async function loadUserPreferences() {
  if (!supabaseClient || !currentUser) {
    loadPreferencesFromLocalStorage();
    return;
  }
  
  try {
    const { data, error } = await supabaseClient
      .from('user_preferences')
      .select('*')
      .eq('user_id', currentUser.id)
      .single();
    
    if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
      console.error('Erro ao carregar prefer√™ncias:', error);
      loadPreferencesFromLocalStorage();
      return;
    }
    
    if (data) {
      currentFontSize = data.font_size || 20;
      isDarkTheme = data.dark_theme || false;
      applyUserPreferences();
    } else {
      loadPreferencesFromLocalStorage();
    }
  } catch (error) {
    console.error('Erro ao carregar prefer√™ncias:', error);
    loadPreferencesFromLocalStorage();
  }
}

/**
 * Salva prefer√™ncias do usu√°rio
 */
async function saveUserPreferences() {
  if (!supabaseClient || !currentUser) {
    savePreferencesToLocalStorage();
    return;
  }
  
  try {
    const { error } = await supabaseClient
      .from('user_preferences')
      .upsert([
        {
          user_id: currentUser.id,
          font_size: currentFontSize,
          dark_theme: isDarkTheme,
          updated_at: new Date().toISOString()
        }
      ]);
    
    if (error) {
      console.error('Erro ao salvar prefer√™ncias:', error);
      savePreferencesToLocalStorage();
      return;
    }
    
    console.log('Prefer√™ncias salvas no Supabase');
  } catch (error) {
    console.error('Erro ao salvar prefer√™ncias:', error);
    savePreferencesToLocalStorage();
  }
}

/**
 * Carrega prefer√™ncias do localStorage
 */
function loadPreferencesFromLocalStorage() {
  currentFontSize = parseInt(localStorage.getItem('fontSize')) || 20;
  isDarkTheme = localStorage.getItem('darkTheme') === 'true';
  applyUserPreferences();
}

/**
 * Salva prefer√™ncias no localStorage
 */
function savePreferencesToLocalStorage() {
  localStorage.setItem('fontSize', currentFontSize.toString());
  localStorage.setItem('darkTheme', isDarkTheme.toString());
}

/**
 * Aplica prefer√™ncias do usu√°rio
 */
function applyUserPreferences() {
  // Aplica tamanho da fonte
  document.body.style.fontSize = `${currentFontSize}px`;
  
  // Aplica tema
  if (isDarkTheme) {
    document.body.classList.add('dark-theme');
  } else {
    document.body.classList.remove('dark-theme');
  }
  
  // Atualiza controles da interface
  updateFontSizeControls();
  updateThemeToggleButton();
}

/**
 * Atualiza controles de tamanho da fonte
 */
function updateFontSizeControls() {
  const slider = document.getElementById('font-size-slider');
  const display = document.getElementById('font-size-display');
  const preview = document.querySelector('.font-preview p');
  
  if (slider) slider.value = currentFontSize;
  if (display) display.textContent = `${currentFontSize}px`;
  if (preview) preview.style.fontSize = `${currentFontSize}px`;
}

/**
 * Atualiza bot√£o de altern√¢ncia de tema
 */
function updateThemeToggleButton() {
  const themeBtn = document.getElementById('theme-toggle-tool');
  if (themeBtn) {
    const icon = themeBtn.querySelector('.tool-icon');
    const label = themeBtn.querySelector('.tool-label');
    
    if (isDarkTheme) {
      if (icon) icon.textContent = '‚òÄÔ∏è';
      if (label) label.textContent = 'Modo Claro';
    } else {
      if (icon) icon.textContent = 'üåô';
      if (label) label.textContent = 'Modo Escuro';
    }
  }
}

// ============================
// UTILIT√ÅRIOS
// ============================

/**
 * Fun√ß√£o para throttle de eventos
 */
function throttle(func, limit) {
  let inThrottle;
  return function() {
    const args = arguments;
    const context = this;
    if (!inThrottle) {
      func.apply(context, args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  };
}

/**
 * Verifica se √© dispositivo m√≥vel
 */
function isMobile() {
  return window.innerWidth <= CONFIG.MOBILE_BREAKPOINT;
}

/**
 * Adiciona classe com anima√ß√£o fade-in
 */
function addFadeInClass(element) {
  if (element) {
    element.classList.add('fade-in');
  }
}

/**
 * Obt√©m ID √∫nico do resumo baseado no t√≠tulo ou URL
 */
function getSummaryId() {
  const title = document.querySelector('h0')?.textContent?.trim() || 
                document.title || 
                window.location.pathname;
  return btoa(title).replace(/[^a-zA-Z0-9]/g, '').substring(0, 20);
}

/**
 * Obt√©m nome do arquivo atual para usar em emails
 */
function getCurrentFileName() {
  const path = window.location.pathname;
  const fileName = path.split('/').pop() || 'resumo';
  return fileName.replace('.html', '') || 'resumo';
}

// ============================
// FUNCIONALIDADES DO ASSISTENTE IA
// ============================

/**
 * Copia texto para a √°rea de transfer√™ncia
 */
async function copyToClipboard(text) {
  try {
    await navigator.clipboard.writeText(text);
    console.log('Texto copiado para a √°rea de transfer√™ncia');
    return true;
  } catch (err) {
    console.error('Erro ao copiar texto:', err);
    // Fallback para navegadores mais antigos
    const textArea = document.createElement('textarea');
    textArea.value = text;
    document.body.appendChild(textArea);
    textArea.select();
    try {
      document.execCommand('copy');
      document.body.removeChild(textArea);
      return true;
    } catch (fallbackErr) {
      console.error('Erro no fallback de c√≥pia:', fallbackErr);
      document.body.removeChild(textArea);
      return false;
    }
  }
}

/**
 * Abre uma plataforma de IA em nova aba com a pergunta e texto selecionado
 */
function openAIPlatform(platform, question) {
  const fullPrompt = selectedText ? `${question}\n\nTexto selecionado:\n${selectedText}` : question;
  copyToClipboard(fullPrompt);
  
  const url = AI_PLATFORMS[platform];
  if (url) {
    window.open(url, '_blank');
    showNotification(`Pergunta copiada! Cole no ${getPlatformDisplayName(platform)}.`);
  } else {
    console.error('Plataforma n√£o encontrada:', platform);
  }
}

/**
 * Retorna o nome de exibi√ß√£o da plataforma
 */
function getPlatformDisplayName(platform) {
  const names = {
    chatgpt: 'ChatGPT',
    openevidence: 'OpenEvidence',
    consensus: 'Consensus',
    perplexity: 'Perplexity'
  };
  return names[platform] || platform;
}

/**
 * Mostra notifica√ß√£o tempor√°ria
 */
function showNotification(message) {
  // Remove notifica√ß√£o existente
  const existingNotification = document.querySelector('.ai-notification');
  if (existingNotification) {
    existingNotification.remove();
  }

  const notification = document.createElement('div');
  notification.className = 'ai-notification';
  notification.textContent = message;
  document.body.appendChild(notification);

  // Remove ap√≥s 3 segundos
  setTimeout(() => {
    if (notification.parentNode) {
      notification.remove();
    }
  }, 3000);
}

/**
 * Lida com sele√ß√£o de texto na p√°gina
 */
function handleTextSelection() {
  const selection = window.getSelection();
  const text = selection.toString().trim();
  
  if (text.length > 0) {
    selectedText = text;
    updateSelectedTextDisplay();
  }
}

/**
 * Atualiza a exibi√ß√£o do texto selecionado no modal
 */
function updateSelectedTextDisplay() {
  const container = document.getElementById('selected-text-container');
  const textDiv = document.getElementById('selected-text');
  
  if (container && textDiv) {
    if (selectedText) {
      textDiv.textContent = selectedText;
      container.style.display = 'block';
    } else {
      container.style.display = 'none';
    }
  }
}

/**
 * Alterna entre plataformas
 */
function switchPlatform(platform) {
  currentPlatform = platform;
  
  // Atualiza bot√µes de plataforma
  const platformButtons = document.querySelectorAll('.platform-btn');
  platformButtons.forEach(btn => {
    const btnPlatform = btn.getAttribute('data-platform');
    btn.classList.toggle('active', btnPlatform === platform);
  });
}

/**
 * Processa pergunta (pr√©-formulada ou personalizada)
 */
function processQuestion(question) {
  openAIPlatform(currentPlatform, question);
}

/**
 * Cria bot√µes de plataformas de IA
 */
function createPlatformButtons() {
  const container = document.querySelector('.platform-buttons');
  if (!container) return;

  container.innerHTML = '';

  const platforms = [
    { id: 'chatgpt', name: 'ChatGPT' },
    { id: 'openevidence', name: 'OpenEvidence' },
    { id: 'consensus', name: 'Consensus' },
    { id: 'perplexity', name: 'Perplexity' }
  ];

  platforms.forEach(platform => {
    const button = document.createElement('button');
    button.className = 'platform-btn';
    button.setAttribute('data-platform', platform.id);
    button.textContent = platform.name;
    
    button.addEventListener('click', () => switchPlatform(platform.id));
    
    container.appendChild(button);
  });
}

/**
 * Cria bot√µes de perguntas pr√©-formuladas
 */
function createPredefinedQuestionButtons() {
  const container = document.getElementById('questions-container');
  if (!container) return;

  container.innerHTML = '';

  PREDEFINED_QUESTIONS.forEach((question, index) => {
    const button = document.createElement('button');
    button.className = 'question-btn';
    button.textContent = question.short;
    button.title = question.detailed;
    
    button.addEventListener('click', () => {
      processQuestion(question.detailed);
    });
    
    container.appendChild(button);
  });
}

// ============================
// FUNCIONALIDADES DE CONTATO E SUGEST√ïES
// ============================

/**
 * Abre email de contato
 */
function openContactEmail() {
  const fileName = getCurrentFileName();
  const subject = `Contato sobre resumo: ${fileName}`;
  const body = `Ol√°,\n\nEstou entrando em contato sobre o resumo "${fileName}".\n\n[Digite sua mensagem aqui]\n\nObrigado!`;
  
  const mailtoLink = `mailto:${CONFIG.CONTACT_EMAIL}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
  window.open(mailtoLink);
}

/**
 * Abre p√°gina de sugest√£o de edi√ß√£o no GitHub
 */
function openSuggestionPage() {
  const fileName = getCurrentFileName();
  const url = `${CONFIG.GITHUB_DISCUSSION_URL}&title=${encodeURIComponent(`Sugest√£o para: ${fileName}`)}`;
  window.open(url, '_blank');
}

// ============================
// FUNCIONALIDADES DE EXPORTA√á√ÉO PDF
// ============================

/**
 * Exporta conte√∫do para PDF
 */
function exportToPDF() {
  showNotification('Preparando PDF...');
  
  // Cria uma nova janela com o conte√∫do para impress√£o
  const printWindow = window.open('', '_blank');
  
  // Obt√©m o conte√∫do principal
  const title = document.querySelector('h0')?.textContent || 'Resumo M√©dico';
  const content = document.body.innerHTML;
  
  // Cria HTML para impress√£o
  const printHTML = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>${title}</title>
      <style>
        body { 
          font-family: 'Garamond', serif; 
          font-size: 12pt; 
          line-height: 1.4; 
          margin: 20px;
          color: #000;
        }
        .floating-menu, .login-container, #sidebar, #toggle-btn, 
        #progress-container, .ai-modal, .tools-modal, .notes-sidebar,
        .checklist-modal, .font-modal, .ai-modal-overlay, 
        .tools-modal-overlay, .notes-sidebar-overlay,
        .checklist-modal-overlay, .font-modal-overlay { 
          display: none !important; 
        }
        h0, h1, h2, h3, h4, h5 { 
          color: #000; 
          page-break-after: avoid; 
        }
        .destaque { 
          background: #f0f0f0; 
          border-left: 4px solid #666; 
          padding: 10px; 
          margin: 10px 0; 
          page-break-inside: avoid; 
        }
        table { 
          border-collapse: collapse; 
          width: 100%; 
          page-break-inside: avoid; 
        }
        th, td { 
          border: 1px solid #666; 
          padding: 8px; 
        }
        th { 
          background: #f0f0f0; 
        }
        @page { 
          margin: 2cm; 
        }
      </style>
    </head>
    <body>
      ${content}
      <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #ccc; font-size: 10pt; color: #666;">
        <p><strong>Anota√ß√µes do usu√°rio:</strong></p>
        ${generateNotesForPDF()}
      </div>
    </body>
    </html>
  `;
  
  printWindow.document.write(printHTML);
  printWindow.document.close();
  
  // Aguarda carregar e abre di√°logo de impress√£o
  printWindow.onload = function() {
    setTimeout(() => {
      printWindow.print();
      showNotification('PDF gerado! Use Ctrl+P ou Cmd+P para salvar.');
    }, 500);
  };
}

/**
 * Gera HTML das anota√ß√µes para incluir no PDF
 */
function generateNotesForPDF() {
  if (currentNotes.length === 0) {
    return '<p style="font-style: italic;">Nenhuma anota√ß√£o encontrada.</p>';
  }
  
  let notesHTML = '<ul>';
  currentNotes.forEach(note => {
    const date = new Date(note.created_at).toLocaleDateString('pt-BR');
    notesHTML += `<li><strong>${date}:</strong> ${note.note}</li>`;
  });
  notesHTML += '</ul>';
  
  return notesHTML;
}

// ============================
// CONTROLE DE MODAIS
// ============================

/**
 * Abre modal gen√©rico
 */
function openModal(modalId, overlayId) {
  const modal = document.getElementById(modalId);
  const overlay = document.getElementById(overlayId);
  
  if (modal && overlay) {
    modal.style.display = 'block';
    overlay.style.display = 'block';
    document.body.style.overflow = 'hidden';
    
    setTimeout(() => {
      modal.classList.add('active');
      overlay.classList.add('active');
    }, 10);
  }
}

/**
 * Fecha modal gen√©rico
 */
function closeModal(modalId, overlayId) {
  const modal = document.getElementById(modalId);
  const overlay = document.getElementById(overlayId);
  
  if (modal && overlay) {
    modal.classList.remove('active');
    overlay.classList.remove('active');
    
    setTimeout(() => {
      modal.style.display = 'none';
      overlay.style.display = 'none';
      document.body.style.overflow = '';
    }, 300);
  }
}

/**
 * Abre sidebar gen√©rica
 */
function openSidebar(sidebarId, overlayId) {
  const sidebar = document.getElementById(sidebarId);
  const overlay = document.getElementById(overlayId);
  
  if (sidebar && overlay) {
    sidebar.classList.add('active');
    overlay.style.display = 'block';
    
    setTimeout(() => {
      overlay.classList.add('active');
    }, 10);
    
    if (isMobile()) {
      document.body.style.overflow = 'hidden';
    }
  }
}

/**
 * Fecha sidebar gen√©rica
 */
function closeSidebar(sidebarId, overlayId) {
  const sidebar = document.getElementById(sidebarId);
  const overlay = document.getElementById(overlayId);
  
  if (sidebar && overlay) {
    sidebar.classList.remove('active');
    overlay.classList.remove('active');
    
    setTimeout(() => {
      overlay.style.display = 'none';
      document.body.style.overflow = '';
    }, 300);
  }
}

// ============================
// CACHE BUST DE IMAGENS
// ============================

/**
 * Aplica cache bust em todas as imagens com ID
 * Previne problemas de cache em imagens externas
 */
function applyCacheBust() {
  const images = document.querySelectorAll('img[id]');
  
  images.forEach(img => {
    if (img.src && !img.src.includes('?t=')) {
      const separator = img.src.includes('?') ? '&' : '?';
      img.src = img.src + separator + 't=' + new Date().getTime();
      console.log('Cache bust aplicado √† imagem:', img.id);
    }
  });
}

// Executa ap√≥s carregar a p√°gina
window.addEventListener('load', applyCacheBust);

// ============================
// CRIA√á√ÉO DIN√ÇMICA DE ELEMENTOS DE INTERFACE
// ============================

/**
 * Cria a barra de progresso de leitura
 */
function createProgressBar() {
  // Verifica se j√° existe
  if (document.getElementById('progress-container')) {
    return;
  }

  const progressContainer = document.createElement('div');
  progressContainer.id = 'progress-container';
  
  const readingTime = document.createElement('div');
  readingTime.id = 'reading-time';
  readingTime.textContent = 'Calculando tempo...';
  
  const progressBar = document.createElement('div');
  progressBar.id = 'progress-bar';
  progressBar.textContent = '0%';
  
  progressContainer.appendChild(readingTime);
  progressContainer.appendChild(progressBar);
  
  document.body.appendChild(progressContainer);
  addFadeInClass(progressContainer);
  
  console.log('Barra de progresso criada dinamicamente');
}

/**
 * Cria o bot√£o flutuante do sum√°rio
 */
function createToggleButton() {
  // Verifica se j√° existe
  if (document.getElementById('toggle-btn')) {
    return;
  }

  const toggleBtn = document.createElement('button');
  toggleBtn.id = 'toggle-btn';
  toggleBtn.setAttribute('aria-label', 'Abrir/Fechar Sum√°rio');
  toggleBtn.setAttribute('title', 'Sum√°rio');
  
  const icon = document.createElement('span');
  icon.className = 'icon';
  icon.textContent = '‚ò∞';
  
  const label = document.createElement('span');
  label.className = 'label';
  label.textContent = 'Sum√°rio';
  
  toggleBtn.appendChild(icon);
  toggleBtn.appendChild(label);
  
  document.body.appendChild(toggleBtn);
  addFadeInClass(toggleBtn);
  
  console.log('Bot√£o de sum√°rio criado dinamicamente');
  return toggleBtn;
}

/**
 * Cria a sidebar do sum√°rio
 */
function createSidebar() {
  // Verifica se j√° existe
  if (document.getElementById('sidebar')) {
    return;
  }

  const sidebar = document.createElement('div');
  sidebar.id = 'sidebar';
  sidebar.setAttribute('aria-label', 'Sum√°rio da p√°gina');
  
  const ul = document.createElement('ul');
  ul.id = 'lista-sumario';
  
  sidebar.appendChild(ul);
  document.body.appendChild(sidebar);
  
  // Cria overlay para mobile
  createSidebarOverlay();
  
  console.log('Sidebar criada dinamicamente');
  return sidebar;
}

/**
 * Cria overlay para sidebar em dispositivos m√≥veis
 */
function createSidebarOverlay() {
  // Verifica se j√° existe
  if (document.getElementById('sidebar-overlay')) {
    return;
  }

  const overlay = document.createElement('div');
  overlay.id = 'sidebar-overlay';
  overlay.setAttribute('aria-hidden', 'true');
  
  document.body.appendChild(overlay);
  
  // Adiciona evento para fechar sidebar ao clicar no overlay
  overlay.addEventListener('click', () => closeSidebar('sidebar', 'sidebar-overlay'));
  
  console.log('Overlay da sidebar criado');
  return overlay;
}

// ============================
// GERA√á√ÉO AUTOM√ÅTICA DO SUM√ÅRIO
// ============================

/**
 * Gera o sum√°rio automaticamente baseado nos cabe√ßalhos da p√°gina
 */
function generateSummary() {
  const headers = document.querySelectorAll('h0, h1, h2, h3, h4');
  const lista = document.getElementById('lista-sumario');
  
  if (!lista) {
    console.warn('Lista do sum√°rio n√£o encontrada');
    return;
  }

  // Limpa lista existente
  lista.innerHTML = '';
  
  let summaryCount = 0;
  
  headers.forEach((header, index) => {
    // Pula h0 se for o t√≠tulo principal
    if (header.tagName === 'H0' && index === 0) {
      return;
    }
    
    // Cria ID √∫nico se n√£o existir
    if (!header.id) {
      header.id = `titulo-${index}`;
    }
    
    const li = document.createElement('li');
    const a = document.createElement('a');
    
    a.href = `#${header.id}`;
    a.textContent = header.textContent.trim();
    a.setAttribute('title', `Ir para: ${header.textContent.trim()}`);
    
    // Aplica indenta√ß√£o baseada no n√≠vel do cabe√ßalho
    const level = parseInt(header.tagName.charAt(1));
    if (level >= 1) {
      li.style.marginLeft = `${(level - 1) * 20}px`;
    }
    
    // Adiciona classe para estiliza√ß√£o espec√≠fica
    li.className = `summary-level-${level}`;
    
    // Evento de clique para scroll suave
    a.addEventListener('click', (e) => {
      e.preventDefault();
      scrollToElement(header);
      
      // Fecha sidebar em mobile ap√≥s clique
      if (isMobile()) {
        closeSidebar('sidebar', 'sidebar-overlay');
      }
    });
    
    li.appendChild(a);
    lista.appendChild(li);
    summaryCount++;
  });
  
  console.log(`Sum√°rio gerado com ${summaryCount} itens`);
}

/**
 * Scroll suave para elemento
 */
function scrollToElement(element) {
  if (element) {
    const offsetTop = element.offsetTop - 80; // Offset para n√£o ficar colado no topo
    window.scrollTo({
      top: offsetTop,
      behavior: 'smooth'
    });
  }
}

// ============================
// CONTROLE DA SIDEBAR DO SUM√ÅRIO
// ============================

/**
 * Alterna visibilidade da sidebar do sum√°rio
 */
function toggleSummarySidebar() {
  const sidebar = document.getElementById('sidebar');
  const overlay = document.getElementById('sidebar-overlay');
  
  if (!sidebar) return;
  
  const isActive = sidebar.classList.contains('active');
  
  if (isActive) {
    closeSidebar('sidebar', 'sidebar-overlay');
  } else {
    openSidebar('sidebar', 'sidebar-overlay');
  }
}

// ============================
// BARRA DE PROGRESSO DE LEITURA
// ============================

/**
 * Calcula e atualiza a barra de progresso de leitura
 */
function updateProgress() {
  const progressBar = document.getElementById('progress-bar');
  const readingTimeEl = document.getElementById('reading-time');
  
  if (!progressBar || !readingTimeEl) return;
  
  // Calcula progresso do scroll
  const scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
  const scrollHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
  const progress = scrollHeight > 0 ? (scrollTop / scrollHeight) * 100 : 0;
  const percent = Math.min(100, Math.round(progress));
  
  // Atualiza largura da barra
  const containerWidth = document.getElementById('progress-container')?.offsetWidth || 0;
  const readingTimeWidth = readingTimeEl.offsetWidth || 0;
  const barWidth = (containerWidth - readingTimeWidth) * (percent / 100);
  
  progressBar.style.width = `${barWidth}px`;
  progressBar.textContent = `${percent}%`;
  
  // Muda cor quando completo
  if (percent === 100) {
    progressBar.classList.add('complete');
  } else {
    progressBar.classList.remove('complete');
  }
  
  // Calcula tempo restante
  updateReadingTime(percent, readingTimeEl);
}

/**
 * Calcula e atualiza o tempo estimado de leitura
 */
function updateReadingTime(percent, readingTimeEl) {
  // Conta palavras do conte√∫do principal
  const bodyText = document.body.innerText || document.body.textContent || '';
  const words = bodyText.trim().split(/\s+/).length;
  const totalMinutes = words / CONFIG.WPM;
  
  const minutesLeft = Math.max(0, Math.ceil(totalMinutes * (1 - percent / 100)));
  const hours = Math.floor(minutesLeft / 60);
  const mins = minutesLeft % 60;
  
  let timeText = 'Tempo restante estimado: ‚è≥ ';
  
  if (percent === 100) {
    timeText = 'Leitura conclu√≠da! ‚úÖ';
  } else if (hours > 0) {
    timeText += `${hours}h ${mins}m`;
  } else {
    timeText += `${mins}m`;
  }
  
  readingTimeEl.textContent = timeText;
}

// ============================
// EVENTOS E INICIALIZA√á√ÉO
// ============================

/**
 * Configura todos os event listeners
 */
function setupEventListeners() {
  // Bot√£o de toggle da sidebar do sum√°rio
  const toggleBtn = document.getElementById('toggle-btn');
  if (toggleBtn) {
    toggleBtn.addEventListener('click', toggleSummarySidebar);
    
    // Suporte a teclado
    toggleBtn.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        toggleSummarySidebar();
      }
    });
  }
  
  // Menu flutuante principal
  const mainFloatingBtn = document.getElementById('main-floating-btn');
  const floatingSubmenu = document.getElementById('floating-submenu');
  
  if (mainFloatingBtn && floatingSubmenu) {
    mainFloatingBtn.addEventListener('click', () => {
      mainFloatingBtn.classList.toggle('active');
      floatingSubmenu.classList.toggle('active');
    });
  }
  
  // Bot√µes do submenu flutuante
  const aiAssistantBtn = document.getElementById('ai-assistant-btn');
  const contactBtn = document.getElementById('contact-btn');
  const suggestEditBtn = document.getElementById('suggest-edit-btn');
  const toolsBtn = document.getElementById('tools-btn');
  
  if (aiAssistantBtn) {
    aiAssistantBtn.addEventListener('click', () => {
      openModal('ai-modal', 'ai-modal-overlay');
      closeFloatingMenu();
    });
  }
  
  if (contactBtn) {
    contactBtn.addEventListener('click', () => {
      openContactEmail();
      closeFloatingMenu();
    });
  }
  
  if (suggestEditBtn) {
    suggestEditBtn.addEventListener('click', () => {
      openSuggestionPage();
      closeFloatingMenu();
    });
  }
  
  if (toolsBtn) {
    toolsBtn.addEventListener('click', () => {
      openModal('tools-modal', 'tools-modal-overlay');
      closeFloatingMenu();
    });
  }
  
  // Bot√µes de login/logout
  const loginBtn = document.getElementById('login-btn');
  const logoutBtn = document.getElementById('logout-btn');
  
  if (loginBtn) {
    loginBtn.addEventListener('click', loginWithGitHub);
  }
  
  if (logoutBtn) {
    logoutBtn.addEventListener('click', logout);
  }
  
  // Bot√µes de ferramentas
  const checklistTool = document.getElementById('checklist-tool');
  const exportPdfTool = document.getElementById('export-pdf-tool');
  const themeToggleTool = document.getElementById('theme-toggle-tool');
  const fontSizeTool = document.getElementById('font-size-tool');
  const notesTool = document.getElementById('notes-tool');
  
  if (checklistTool) {
    checklistTool.addEventListener('click', () => {
      openModal('checklist-modal', 'checklist-modal-overlay');
      closeModal('tools-modal', 'tools-modal-overlay');
    });
  }
  
  if (exportPdfTool) {
    exportPdfTool.addEventListener('click', () => {
      exportToPDF();
      closeModal('tools-modal', 'tools-modal-overlay');
    });
  }
  
  if (themeToggleTool) {
    themeToggleTool.addEventListener('click', () => {
      toggleTheme();
      closeModal('tools-modal', 'tools-modal-overlay');
    });
  }
  
  if (fontSizeTool) {
    fontSizeTool.addEventListener('click', () => {
      openModal('font-modal', 'font-modal-overlay');
      closeModal('tools-modal', 'tools-modal-overlay');
    });
  }
  
  if (notesTool) {
    notesTool.addEventListener('click', () => {
      openSidebar('notes-sidebar', 'notes-sidebar-overlay');
      closeModal('tools-modal', 'tools-modal-overlay');
    });
  }
  
  // Controles de fonte
  const fontSlider = document.getElementById('font-size-slider');
  const fontDecrease = document.getElementById('font-decrease');
  const fontIncrease = document.getElementById('font-increase');
  
  if (fontSlider) {
    fontSlider.addEventListener('input', (e) => {
      changeFontSize(parseInt(e.target.value));
    });
  }
  
  if (fontDecrease) {
    fontDecrease.addEventListener('click', () => {
      changeFontSize(currentFontSize - 1);
    });
  }
  
  if (fontIncrease) {
    fontIncrease.addEventListener('click', () => {
      changeFontSize(currentFontSize + 1);
    });
  }
  
  // Controles de anota√ß√µes
  const addNoteBtn = document.getElementById('add-note-btn');
  const notesSearchInput = document.getElementById('notes-search-input');
  
  if (addNoteBtn) {
    addNoteBtn.addEventListener('click', addNewNote);
  }
  
  if (notesSearchInput) {
    notesSearchInput.addEventListener('input', (e) => {
      filterNotes(e.target.value);
    });
  }
  
  // Bot√µes de fechar modais
  setupModalCloseButtons();
  
  // Eventos de scroll com throttle
  const throttledUpdateProgress = throttle(updateProgress, CONFIG.SCROLL_THROTTLE);
  window.addEventListener('scroll', throttledUpdateProgress);
  
  // Eventos de redimensionamento
  window.addEventListener('resize', () => {
    updateProgress();
    
    // Fecha sidebar em desktop se estiver aberta
    if (!isMobile()) {
      const overlay = document.getElementById('sidebar-overlay');
      if (overlay && overlay.classList.contains('active')) {
        closeSidebar('sidebar', 'sidebar-overlay');
      }
    }
  });
  
  // Tecla ESC para fechar modais e sidebars
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeAllModalsAndSidebars();
    }
  });
  
  // Sele√ß√£o de texto na p√°gina
  document.addEventListener('mouseup', handleTextSelection);
  document.addEventListener('keyup', handleTextSelection);
  
  console.log('Event listeners configurados');
}

/**
 * Configura bot√µes de fechar modais
 */
function setupModalCloseButtons() {
  // Modal do assistente IA
  const aiModalClose = document.getElementById('ai-modal-close');
  const aiModalOverlay = document.getElementById('ai-modal-overlay');
  
  if (aiModalClose) {
    aiModalClose.addEventListener('click', () => closeModal('ai-modal', 'ai-modal-overlay'));
  }
  
  if (aiModalOverlay) {
    aiModalOverlay.addEventListener('click', () => closeModal('ai-modal', 'ai-modal-overlay'));
  }
  
  // Modal de ferramentas
  const toolsModalClose = document.getElementById('tools-modal-close');
  const toolsModalOverlay = document.getElementById('tools-modal-overlay');
  
  if (toolsModalClose) {
    toolsModalClose.addEventListener('click', () => closeModal('tools-modal', 'tools-modal-overlay'));
  }
  
  if (toolsModalOverlay) {
    toolsModalOverlay.addEventListener('click', () => closeModal('tools-modal', 'tools-modal-overlay'));
  }
  
  // Modal de checklist
  const checklistModalClose = document.getElementById('checklist-modal-close');
  const checklistModalOverlay = document.getElementById('checklist-modal-overlay');
  
  if (checklistModalClose) {
    checklistModalClose.addEventListener('click', () => closeModal('checklist-modal', 'checklist-modal-overlay'));
  }
  
  if (checklistModalOverlay) {
    checklistModalOverlay.addEventListener('click', () => closeModal('checklist-modal', 'checklist-modal-overlay'));
  }
  
  // Modal de fonte
  const fontModalClose = document.getElementById('font-modal-close');
  const fontModalOverlay = document.getElementById('font-modal-overlay');
  
  if (fontModalClose) {
    fontModalClose.addEventListener('click', () => closeModal('font-modal', 'font-modal-overlay'));
  }
  
  if (fontModalOverlay) {
    fontModalOverlay.addEventListener('click', () => closeModal('font-modal', 'font-modal-overlay'));
  }
  
  // Sidebar de anota√ß√µes
  const notesSidebarClose = document.getElementById('notes-sidebar-close');
  const notesSidebarOverlay = document.getElementById('notes-sidebar-overlay');
  
  if (notesSidebarClose) {
    notesSidebarClose.addEventListener('click', () => closeSidebar('notes-sidebar', 'notes-sidebar-overlay'));
  }
  
  if (notesSidebarOverlay) {
    notesSidebarOverlay.addEventListener('click', () => closeSidebar('notes-sidebar', 'notes-sidebar-overlay'));
  }
  
  // Bot√£o de enviar pergunta personalizada
  const sendCustomBtn = document.getElementById('send-custom-btn');
  if (sendCustomBtn) {
    sendCustomBtn.addEventListener('click', () => {
      const customQuestion = document.getElementById('custom-question');
      if (customQuestion && customQuestion.value.trim()) {
        processQuestion(customQuestion.value.trim());
        customQuestion.value = '';
      }
    });
  }

  // Enter no textarea para enviar
  const customQuestion = document.getElementById('custom-question');
  if (customQuestion) {
    customQuestion.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        const sendBtn = document.getElementById('send-custom-btn');
        if (sendBtn) sendBtn.click();
      }
    });
  }
}

/**
 * Fecha menu flutuante
 */
function closeFloatingMenu() {
  const mainFloatingBtn = document.getElementById('main-floating-btn');
  const floatingSubmenu = document.getElementById('floating-submenu');
  
  if (mainFloatingBtn) mainFloatingBtn.classList.remove('active');
  if (floatingSubmenu) floatingSubmenu.classList.remove('active');
}

/**
 * Fecha todos os modais e sidebars
 */
function closeAllModalsAndSidebars() {
  closeModal('ai-modal', 'ai-modal-overlay');
  closeModal('tools-modal', 'tools-modal-overlay');
  closeModal('checklist-modal', 'checklist-modal-overlay');
  closeModal('font-modal', 'font-modal-overlay');
  closeSidebar('notes-sidebar', 'notes-sidebar-overlay');
  closeSidebar('sidebar', 'sidebar-overlay');
  closeFloatingMenu();
}

/**
 * Alterna tema claro/escuro
 */
function toggleTheme() {
  isDarkTheme = !isDarkTheme;
  applyUserPreferences();
  saveUserPreferences();
  showNotification(`Tema ${isDarkTheme ? 'escuro' : 'claro'} ativado!`);
}

/**
 * Altera tamanho da fonte
 */
function changeFontSize(newSize) {
  currentFontSize = Math.max(14, Math.min(28, newSize));
  applyUserPreferences();
  saveUserPreferences();
}

/**
 * Inicializa√ß√£o principal do script
 */
function initializeApp() {
  console.log('Inicializando aplica√ß√£o...');
  
  try {
    // 1. Inicializa Supabase
    initializeSupabase();
    
    // 2. Aplica cache bust nas imagens
    applyCacheBust();
    
    // 3. Cria elementos de interface dinamicamente
    createProgressBar();
    createToggleButton();
    createSidebar();
    
    // 4. Gera sum√°rio automaticamente
    generateSummary();
    
    // 5. Configura event listeners
    setupEventListeners();
    
    // 6. Inicializa assistente IA
    initializeAIAssistant();
    
    // 7. Carrega prefer√™ncias do usu√°rio
    loadUserPreferences();
    
    // 8. Carrega checklist
    loadUserChecklist();
    
    // 9. Atualiza progresso inicial
    updateProgress();
    
    console.log('Aplica√ß√£o inicializada com sucesso!');
    
  } catch (error) {
    console.error('Erro durante a inicializa√ß√£o:', error);
  }
}

/**
 * Inicializa o assistente IA
 */
function initializeAIAssistant() {
  console.log('Inicializando assistente IA...');
  
  try {
    // Cria bot√µes de plataformas
    createPlatformButtons();
    
    // Cria bot√µes de perguntas pr√©-formuladas
    createPredefinedQuestionButtons();
    
    // Define plataforma inicial
    switchPlatform('chatgpt');
    
    console.log('Assistente IA inicializado com sucesso!');
    
  } catch (error) {
    console.error('Erro ao inicializar assistente IA:', error);
  }
}

// ============================
// INICIALIZA√á√ÉO AUTOM√ÅTICA
// ============================

// Aguarda o DOM estar pronto
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeApp);
} else {
  // DOM j√° est√° pronto
  initializeApp();
}

/**
 * Fun√ß√£o de reinicializa√ß√£o para novos conte√∫dos
 * √ötil quando o conte√∫do da p√°gina √© alterado dinamicamente
 */
function reinitialize() {
  console.log('Reinicializando aplica√ß√£o...');
  
  // Regenera sum√°rio
  generateSummary();
  
  // Atualiza progresso
  updateProgress();
  
  // Recarrega checklist
  loadUserChecklist();
  
  console.log('Aplica√ß√£o reinicializada');
}

// Exp√µe fun√ß√µes globais para uso externo se necess√°rio
window.MedicalResumeApp = {
  reinitialize,
  toggleSummarySidebar,
  updateProgress,
  generateSummary,
  loginWithGitHub,
  logout,
  saveNote,
  exportToPDF,
  toggleTheme,
  changeFontSize
};

console.log('Script do modelo de resumos m√©dicos carregado');

